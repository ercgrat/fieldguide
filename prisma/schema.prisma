// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index(fields: [userId])
}

model Crop {
  id                  Int          @id @default(autoincrement())
  organization        Organization @relation(fields: [organizationId], references: [id])
  organizationId      Int
  name                String
  daysToMaturity      Int
  harvestWindow       Int
  harvestUnit         Unit?        @relation(fields: [unitId], references: [id])
  harvestRate         Int?
  pricePerHarvestUnit Float?
  Planting            Planting[]
  unitId              Int?

  @@unique([organizationId, name])
  @@index(fields: [unitId])
}

model Membership {
  id             Int          @id @default(autoincrement())
  user           User         @relation(fields: [userId], references: [id])
  organization   Organization @relation(fields: [organizationId], references: [id])
  userId         String
  organizationId Int
  role           Role         @default(Member)

  @@unique([userId, organizationId])
  @@index(fields: [organizationId])
}

model Organization {
  id         Int          @id @default(autoincrement())
  created_at DateTime     @default(now())
  name       String       @unique
  street1    String
  street2    String?
  city       String
  state      String
  postCode   String
  phone      String?
  email      String
  unitSystem UnitSystem
  Membership Membership[]
  Crop       Crop[]
  Unit       Unit[]
}

model Planting {
  id           Int      @id @default(autoincrement())
  created_at   DateTime @default(now())
  cropId       Int
  crop         Crop     @relation(fields: [cropId], references: [id])
  bedLength    Int?
  rowsPerPed   Int?
  inRowSpacing Int?

  @@index(fields: [cropId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index(fields: [userId])
}

model Unit {
  id             Int          @id @default(autoincrement())
  organization   Organization @relation(fields: [organizationId], references: [id])
  organizationId Int
  name           String
  abbreviation   String
  Crop           Crop[]

  @@unique([organizationId, name])
}

model User {
  id            String       @id @default(cuid())
  name          String?
  email         String?      @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  memberships   Membership[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum Role {
  Owner
  Member
}

enum UnitSystem {
  Metric
  Imperial
}
